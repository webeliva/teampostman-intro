{
	"info": {
		"_postman_id": "95084f60-b629-4bb5-aef8-d2a2131c47b1",
		"name": "Team PostMan API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22722157"
	},
	"item": [
		{
			"name": "Get An API Client",
			"item": [
				{
					"name": "Get An API Client: Valid name & email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"Kehinde\",\n   \"clientEmail\": \"kencompute@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/api-clients/",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An API Client: Invalid name &  Valid email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \".\",\n   \"clientEmail\": \"kencompute@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/api-clients/",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An API Client: Blank name & email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"\",\n   \"clientEmail\": \"kencompute@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/api-clients/",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An API Client: Existing name & email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"Kehinde\",\n   \"clientEmail\": \"kencompute@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/api-clients/",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place A Book Order",
			"item": [
				{
					"name": "Place a book order: When Name & Book ID is entered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"kehinde\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order : When only BookID is entered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order: When Name & ID is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": ,\n  \"customerName\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order: When Name only is entered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": ,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    pm.test(\"Status code name should have a string\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/?id=all",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "id",
									"value": "all"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Entry per ID",
			"item": [
				{
					"name": "Get entry per ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo/?todo_id=2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books: Fictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbook}}/books?type=fiction",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books: Non- Fictions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbook}}/books?type=non-fiction",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders?id=all",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "id",
									"value": "all"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get An Order",
			"item": [
				{
					"name": "Get an order: Using this ID: 4ikwgUo_qENmHHXc9TyWe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders/:{{orderid}}",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders",
								":{{orderid}}"
							],
							"variable": [
								{
									"key": "{{orderid}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order: Using this ID: 9_FjOy5ymPkgGsJq3nGhZ",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders/:{{orderid}}",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders",
								":{{orderid}}"
							],
							"variable": [
								{
									"key": "{{orderid}}",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete An Order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d2c5b2196bc52e989e1488147fac2a55027028b786bcc81c255128ba50af19fc",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbook}}/orders/:orderId",
							"host": [
								"{{baseurlbook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "9_FjOy5ymPkgGsJq3nGhZ"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}